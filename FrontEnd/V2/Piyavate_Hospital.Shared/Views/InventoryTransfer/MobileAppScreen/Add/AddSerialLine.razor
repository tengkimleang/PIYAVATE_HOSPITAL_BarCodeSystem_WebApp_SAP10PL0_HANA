<SectionContent SectionName="Is-BackButton">
    <FluentButton IconEnd="@(new Icons.Regular.Size20.ArrowCircleLeft())"
                  Title="Back"
                  OnClick="@(e => IsViewDetail())"
                  Class="margin-xs"/>
    @(new MarkupString($@"&nbsp;&nbsp;Add Serial"))
</SectionContent>
<FluentLayout Style="margin-top: 0;">
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <FluentBodyContent Class="body-content" Style="overflow: auto">
            <div class="content">
                <FluentGrid Spacing="2" OnBreakpointEnter="@UpdateGridSize" AdaptiveRendering="true">

                    <FluentGridItem xs="12" sm="4" lg="6" xl="6">
                        <FluentAutocomplete Required
                                            TOption="GetBatchOrSerial"
                                            Width="100%"
                                            Placeholder="Batch Search"
                                            OnOptionsSearch="OnSearchBatch"
                                            MaximumOptionsSearch="1"
                                            Label="Serial Code"
                                            Virtualize="true"
                                            Items="SerialBatchDeliveryOrders"
                                            MaximumSelectedOptions="1"
                                            OptionText="@(item => $"{item.SerialBatch}")"
                                            @bind-SelectedOptions="@SelectedSerial"
                                            ValueChanged="@(e => UpdateItemDetails(e ?? ""))"/>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentNumberField ReadOnly="true" Label="Qty" @bind-Value="@SerialInventoryTransfer.Qty" style="width: 100%;">
                        </FluentNumberField>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentTextField Value="@($"{(SerialInventoryTransfer.ExpDate.HasValue ? SerialInventoryTransfer.ExpDate.Value.ToString("dd/MM/yyyy") : "")}")"
                                         ReadOnly="true"
                                         Label="Expire Date"
                                         style="width: 100%;"/>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentTextField Value="@($"{(SerialInventoryTransfer.MfrDate.HasValue ? SerialInventoryTransfer.MfrDate.Value.ToShortDateString() : "")}")"
                                         ReadOnly="true"
                                         Label="Manufacturer Date"
                                         style="width: 100%;"/>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentTextField Value="@($"{(SerialInventoryTransfer.ExpDate.HasValue ? SerialInventoryTransfer.ExpDate.Value.ToString("dd/MM/yyyy") : "")}")"
                                         ReadOnly="true"
                                         Label="Admission Date"
                                         style="width: 100%;"/>
                    </FluentGridItem>
                </FluentGrid>
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FloatActionButton Icon="@(new Icons.Regular.Size20.Add())"
                       Title="@(IsUpdate ? "Update" : "Add")"
                       Callback="@(e => SaveSerial(SerialInventoryTransfer))"/>
    @if (IsUpdate)
    {
        <FloatActionButton Icon="@(new Icons.Regular.Size20.Delete())"
                           Title="Delete"
                           Callback="@(e => DeleteSerial(Index))"
                           Position="FloatActionButton.PositionEnum.Left"
                           ColorButton="Color.Error"/>
    }

</FluentLayout>